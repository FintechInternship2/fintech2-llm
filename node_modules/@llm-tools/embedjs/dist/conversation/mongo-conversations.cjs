"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoConversation = void 0;
const debug_1 = __importDefault(require("debug"));
const mongodb_1 = require("mongodb");
class MongoConversation {
    constructor({ uri, dbName, collectionName }) {
        Object.defineProperty(this, "debug", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0, debug_1.default)('embedjs:conversation:MongoConversation')
        });
        Object.defineProperty(this, "uri", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dbName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "collectionName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "collection", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.uri = uri;
        this.dbName = dbName;
        this.collectionName = collectionName;
    }
    async init() {
        const client = new mongodb_1.MongoClient(this.uri);
        await client.connect();
        this.collection = client.db(this.dbName).collection(this.collectionName);
        try {
            await this.collection.createIndex({ conversationId: 1 });
        }
        catch {
            this.debug('Index on conversationId already exists.');
        }
        try {
            await this.collection.createIndex({ 'entries._id': 1 });
        }
        catch {
            this.debug('Index on `entries._id` already exists.');
        }
    }
    async addConversation(conversationId) {
        // Check if conversation already exists to prevent duplication
        const exists = await this.hasConversation(conversationId);
        if (!exists) {
            await this.collection.insertOne({ conversationId, entries: [] });
        }
    }
    async getConversation(conversationId) {
        const document = await this.collection.findOne({ conversationId });
        if (!document) {
            // If not found, create a new one automatically
            await this.addConversation(conversationId);
            return { conversationId, entries: [] };
        }
        return {
            conversationId: document.conversationId,
            entries: document.entries,
        };
    }
    async hasConversation(conversationId) {
        return !!(await this.collection.findOne({ conversationId }));
    }
    async deleteConversation(conversationId) {
        await this.collection.deleteOne({ conversationId });
    }
    async addEntryToConversation(conversationId, entry) {
        await this.collection.updateOne({ conversationId }, { $push: { entries: entry } });
    }
    async clearConversations() {
        await this.collection.deleteMany({});
    }
}
exports.MongoConversation = MongoConversation;
